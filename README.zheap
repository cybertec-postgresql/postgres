This is an attempt to integrate the original implementation of the zheap
access method [1] with the new undo record set infrastructure [2], or rather
its version published in [3]. Also, this branch tries to merge the new
features with the master branch of the PostgreSQL database server.

Besides putting things together, this branch introduces monitoring functions
and views (e.g. pg_stat_undo_chunks, pg_stat_undo_records) that should make it
easier to learn about the zheap/undo internals and to fix problems encountered
during development. In order to resolve all the pending design issues, various
experimental branches will probably need to be created and evaluated. This is
where the new monitoring infrastructure should help.

Regardless the future development, the following thins need more work:

    * Review if the merge with the postgres master is correct.

    * Implement insertion of UNDO records by parallel workers, so that
      parallel INSERT works (currently it raises ERROR).

      Besides that, with parallel UNDO we should be able to implement parallel
      VACUUM not only for indexes (like the master branch currently does) but
      also for the table itself. The point is that with zheap, VACUUM creates
      undo records when changing the item pointers to the 'unused' state. Thus
      it's not necessary to vacuum all indexes before vacuuming the table: if
      the VACUUM command fails, the 'unused' items pointers in the table are
      set back to 'dead' during rollback, and there is no risk that
      not-yet-vacuumed index entries will point to reused heap entries with
      different key value. In short, the UNDO eliminates some dependencies
      between the stages of VACUUM and thus makes parallel processing easier.

    * Implement discard worker - unlike [3], it's essential for the zheap.

    * Improve / rework serialization of the undo records.

    * Add zheap specific regression tests from [1]

This branch does introduce the "undo worker", however it only runs after crash
recovery in order to apply the undo log of transactions that could not
complete due to server crash. Otherwise, according to [4] and [5], it seems
worth to implement the zheap AM without background UNDO and test if it's
viable.


[1] https://github.com/EnterpriseDB/zheap/tree/master
[2] https://github.com/EnterpriseDB/zheap/tree/undo-record-set
[3] https://www.postgresql.org/message-id/87363.1611941415%40antos
[4] https://www.postgresql.org/message-id/9d06265c-356a-9ee7-dc22-c21a2353f986%40iki.fi
[5] https://www.postgresql.org/message-id/CAH2-Wzk06ypb40z3B8HFiSsTVg961%3DE0%3DuQvqARJgT8_4QB2Mg%40mail.gmail.com